"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CCarousel = require("./CCarousel");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//component - CoreUI / CCarouselIndicators
var CCarouselIndicators = function CCarouselIndicators(props) {
  var className = props.className,
      innerRef = props.innerRef,
      indicatorsClass = props.indicatorsClass,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "indicatorsClass"]);

  var _useContext = (0, _react.useContext)(_CCarousel.Context),
      itemNumber = _useContext.itemNumber,
      state = _useContext.state,
      setState = _useContext.setState,
      animating = _useContext.animating; //render


  var listClasses = (0, _classnames["default"])(indicatorsClass, className);
  var indicators = Array.from({
    length: itemNumber
  }, function (_, i) {
    return i;
  }).map(function (key) {
    return /*#__PURE__*/_react["default"].createElement("li", {
      key: "indicator" + key,
      onClick: function onClick() {
        !animating && key !== state[1] && setState([state[1], key]);
      },
      className: state[1] === key ? 'active' : ''
    });
  });
  return /*#__PURE__*/_react["default"].createElement("ol", _extends({
    className: listClasses
  }, attributes, {
    ref: innerRef
  }), indicators);
};

CCarouselIndicators.propTypes = process.env.NODE_ENV !== "production" ? {
  className: _propTypes["default"].string,
  //
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func, _propTypes["default"].string]),
  indicatorsClass: _propTypes["default"].string
} : {};
CCarouselIndicators.defaultProps = {
  indicatorsClass: 'carousel-indicators'
};
var _default = CCarouselIndicators;
exports["default"] = _default;
module.exports = exports.default;