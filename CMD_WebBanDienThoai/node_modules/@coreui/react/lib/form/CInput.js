"use strict";

exports.__esModule = true;
exports.CSelect = exports.CInputRadio = exports.CInputCheckbox = exports.CInputFile = exports.CTextarea = exports.CInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//component - CoreUI / CInput
var commonPropTypes = process.env.NODE_ENV !== "production" ? {
  className: _propTypes["default"].string,
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func, _propTypes["default"].string]),
  valid: _propTypes["default"].bool,
  invalid: _propTypes["default"].bool
} : {};

var CInput = function CInput(props) {
  var className = props.className,
      innerRef = props.innerRef,
      type = props.type,
      valid = props.valid,
      invalid = props.invalid,
      plaintext = props.plaintext,
      size = props.size,
      sizeHtml = props.sizeHtml,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "type", "valid", "invalid", "plaintext", "size", "sizeHtml"]); // render


  var classes = (0, _classnames["default"])(plaintext ? 'form-control-plaintext' : 'form-control', size && "form-control-" + size, invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: classes,
    type: type
  }, attributes, {
    size: sizeHtml,
    ref: innerRef
  }));
};

exports.CInput = CInput;
CInput.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  plaintext: _propTypes["default"].bool,
  type: _propTypes["default"].string,
  size: _propTypes["default"].string,
  sizeHtml: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])
}) : {};
CInput.defaultProps = {
  type: 'text'
};

var CTextarea = function CTextarea(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      plaintext = props.plaintext,
      size = props.size,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "plaintext", "size"]); // render


  var classes = (0, _classnames["default"])(plaintext ? 'form-control-plaintext' : 'form-control', size && "form-control-" + size, invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/_react["default"].createElement("textarea", _extends({
    className: classes
  }, attributes, {
    ref: innerRef
  }));
};

exports.CTextarea = CTextarea;
CTextarea.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  plaintext: _propTypes["default"].bool,
  size: _propTypes["default"].string
}) : {};

var CInputFile = function CInputFile(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      custom = props.custom,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "custom"]); // render


  var classes = (0, _classnames["default"])(custom ? 'custom-file-input' : 'form-control-file', invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: classes
  }, attributes, {
    type: "file",
    ref: innerRef
  }));
};

exports.CInputFile = CInputFile;
CInputFile.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  custom: _propTypes["default"].bool
}) : {};

var CInputCheckbox = function CInputCheckbox(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      custom = props.custom,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "custom"]); // render


  var classes = (0, _classnames["default"])(custom ? 'custom-control-input' : 'form-check-input', invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: classes,
    type: "checkbox"
  }, attributes, {
    ref: innerRef
  }));
};

exports.CInputCheckbox = CInputCheckbox;
CInputCheckbox.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  custom: _propTypes["default"].bool
}) : {};

var CInputRadio = function CInputRadio(props) {
  return /*#__PURE__*/_react["default"].createElement(CInputCheckbox, _extends({}, props, {
    type: "radio"
  }));
};

exports.CInputRadio = CInputRadio;

var CSelect = function CSelect(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      size = props.size,
      sizeHtml = props.sizeHtml,
      custom = props.custom,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "size", "sizeHtml", "custom"]); // render


  var baseClass = custom ? 'custom-select' : 'form-control';
  var classes = (0, _classnames["default"])(baseClass, size && baseClass + "-" + size, invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/_react["default"].createElement("select", _extends({
    className: classes
  }, attributes, {
    size: sizeHtml,
    ref: innerRef
  }));
};

exports.CSelect = CSelect;
CSelect.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  size: _propTypes["default"].string,
  sizeHtml: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])
}) : {};