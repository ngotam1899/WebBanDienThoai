"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _helper = require("../utils/helper.js");

var _CLink = _interopRequireDefault(require("../link/CLink"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//component - CoreUI / CButton
var CButton = function CButton(props) {
  var Tag = props.tag,
      className = props.className,
      innerRef = props.innerRef,
      onClick = props.onClick,
      disabled = props.disabled,
      active = props.active,
      block = props.block,
      color = props.color,
      size = props.size,
      pressed = props.pressed,
      shape = props.shape,
      variant = props.variant,
      attributes = _objectWithoutPropertiesLoose(props, ["tag", "className", "innerRef", "onClick", "disabled", "active", "block", "color", "size", "pressed", "shape", "variant"]);

  var click = function click(e) {
    return !disabled && onClick && onClick(e);
  };

  var isLink = attributes.to || attributes.href; //render

  var classes = (0, _classnames["default"])(className, 'btn', variant || color ? "btn" + (variant ? '-' + variant : '') + "-" + color : false, size ? "btn-" + size : false, block ? 'btn-block' : false, shape ? "btn-" + shape : false, pressed ? 'btn-pressed' : false, {
    'active': active && !isLink,
    'disabled': disabled && !isLink
  });

  if (isLink) {
    return /*#__PURE__*/_react["default"].createElement(_CLink["default"], _extends({}, attributes, {
      active: active,
      disabled: disabled,
      className: classes,
      onClick: click,
      innerRef: innerRef
    }));
  } else {
    return /*#__PURE__*/_react["default"].createElement(Tag, _extends({
      className: classes,
      type: "button",
      disabled: disabled
    }, attributes, {
      onClick: click,
      ref: innerRef
    }));
  }
};

CButton.propTypes = process.env.NODE_ENV !== "production" ? {
  tag: _helper.tagPropType,
  className: _propTypes["default"].string,
  //
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func, _propTypes["default"].string]),
  active: _propTypes["default"].bool,
  block: _propTypes["default"].bool,
  shape: _propTypes["default"].string,
  variant: _propTypes["default"].oneOf(['', 'ghost', 'outline']),
  color: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  onClick: _propTypes["default"].func,
  size: _propTypes["default"].string,
  pressed: _propTypes["default"].bool
} : {};
CButton.defaultProps = {
  tag: 'button'
}; //export

var _default = CButton;
exports["default"] = _default;
module.exports = exports.default;