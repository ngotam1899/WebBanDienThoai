"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _index = require("../index");

var _iconsReact = _interopRequireDefault(require("@coreui/icons-react"));

var _CSidebarNavDropdown = require("./CSidebarNavDropdown");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//component - CoreUI / CSidebarNavItem
var CSidebarNavItem = function CSidebarNavItem(props) {
  var children = props.children,
      className = props.className,
      innerRef = props.innerRef,
      name = props.name,
      icon = props.icon,
      fontIcon = props.fontIcon,
      badge = props.badge,
      addLinkClass = props.addLinkClass,
      label = props.label,
      color = props.color,
      rest = _objectWithoutPropertiesLoose(props, ["children", "className", "innerRef", "name", "icon", "fontIcon", "badge", "addLinkClass", "label", "color"]); //render


  var classes = (0, _classnames["default"])('c-sidebar-nav-item', className);
  var linkClasses = (0, _classnames["default"])(label ? 'c-sidebar-nav-label' : 'c-sidebar-nav-link', color && "c-sidebar-nav-link-" + color, addLinkClass);
  var routerLinkProps = rest.to && {
    exact: true,
    activeClassName: 'c-active'
  };
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: classes,
    ref: innerRef
  }, children || /*#__PURE__*/_react["default"].createElement(_index.CLink, _extends({
    className: linkClasses
  }, routerLinkProps, rest), icon && /*#__PURE__*/_react["default"].createElement(_iconsReact["default"], (0, _CSidebarNavDropdown.iconProps)(icon)), fontIcon && /*#__PURE__*/_react["default"].createElement("i", {
    className: "c-sidebar-nav-icon " + fontIcon
  }), name, badge && /*#__PURE__*/_react["default"].createElement(_index.CBadge, _extends(_extends({}, badge), {}, {
    text: null
  }), badge.text)));
};

CSidebarNavItem.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes["default"].node,
  className: _propTypes["default"].string,
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].string, _propTypes["default"].object]),
  icon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  fontIcon: _propTypes["default"].string,
  badge: _propTypes["default"].object,
  addLinkClass: _propTypes["default"].string,
  label: _propTypes["default"].bool,
  name: _propTypes["default"].string,
  color: _propTypes["default"].string
} : {};
var _default = CSidebarNavItem;
exports["default"] = _default;
module.exports = exports.default;