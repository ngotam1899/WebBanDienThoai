"use strict";

exports.__esModule = true;
exports["default"] = exports.iconProps = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _iconsReact = _interopRequireDefault(require("@coreui/icons-react"));

var _reactRouterDom = require("react-router-dom");

var _CSidebar = require("./CSidebar");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var iconProps = function iconProps(icon) {
  if (typeof icon === 'object') {
    var _extends2;

    var key = icon.size ? 'className' : 'customClasses';
    return _extends(_extends({}, icon), {}, (_extends2 = {}, _extends2["" + key] = icon.customClasses || "c-sidebar-nav-icon " + icon.className, _extends2));
  } else {
    return {
      customClasses: 'c-sidebar-nav-icon',
      name: icon
    };
  }
}; //component - CoreUI / CSidebarNavDropdown


exports.iconProps = iconProps;

var CSidebarNavDropdown = function CSidebarNavDropdown(props) {
  var children = props.children,
      className = props.className,
      innerRef = props.innerRef,
      icon = props.icon,
      fontIcon = props.fontIcon,
      name = props.name,
      show = props.show,
      route = props.route,
      attributes = _objectWithoutPropertiesLoose(props, ["children", "className", "innerRef", "icon", "fontIcon", "name", "show", "route"]);

  var ref = (0, _react.createRef)();
  innerRef && innerRef(ref);

  var _useContext = (0, _react.useContext)(_CSidebar.Context),
      dropdownMode = _useContext.dropdownMode,
      openDropdown = _useContext.openDropdown,
      setOpenDropdown = _useContext.setOpenDropdown;

  var _useState = (0, _react.useState)(show),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  (0, _react.useEffect)(function () {
    setIsOpen(show);
  }, [show]);
  (0, _react.useEffect)(function () {
    !dropdownMode && (!openDropdown || !ref.current.contains(openDropdown)) && setIsOpen(false);
  }, [openDropdown]);

  var toggle = function toggle() {
    !dropdownMode && setOpenDropdown(isOpen ? ref.current.parentNode.closest('.c-sidebar-nav-dropdown') : ref.current);
    setIsOpen(!isOpen);
  };

  var path = '';

  try {
    path = (0, _reactRouterDom.useLocation)().pathname;
  } catch (e) {
    console.warn(e);
  }

  (0, _react.useEffect)(function () {
    if (dropdownMode === 'close') {
      setIsOpen(false);
    } else if (dropdownMode === 'closeInactive' && route) {
      setIsOpen(path.includes(route));
    } else if ((!dropdownMode || dropdownMode !== 'noAction') && !isOpen && route) {
      setIsOpen(path.includes(route));
    }
  }, [path]); //render

  var classes = (0, _classnames["default"])('c-sidebar-nav-dropdown', isOpen && 'c-show', className);
  var iconClasses = (0, _classnames["default"])('c-sidebar-nav-icon', fontIcon);
  return /*#__PURE__*/_react["default"].createElement("li", _extends({
    className: classes
  }, attributes, {
    ref: ref
  }), /*#__PURE__*/_react["default"].createElement("a", {
    className: "c-sidebar-nav-dropdown-toggle",
    onClick: toggle
  }, icon && /*#__PURE__*/_react["default"].createElement(_iconsReact["default"], iconProps(icon)), fontIcon && /*#__PURE__*/_react["default"].createElement("i", {
    className: iconClasses
  }), name), /*#__PURE__*/_react["default"].createElement("ul", {
    className: "c-sidebar-nav-dropdown-items"
  }, children));
};

CSidebarNavDropdown.propTypes = process.env.NODE_ENV !== "production" ? {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  //
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func, _propTypes["default"].string]),
  name: _propTypes["default"].string,
  icon: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].string]),
  fontIcon: _propTypes["default"].string,
  show: _propTypes["default"].bool,
  route: _propTypes["default"].string
} : {};
var _default = CSidebarNavDropdown;
exports["default"] = _default;