"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _helper = require("../utils/helper.js");

var _CButton = _interopRequireDefault(require("../button/CButton"));

var _CLink = _interopRequireDefault(require("../link/CLink"));

var _CDropdown = require("./CDropdown");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//component - CoreUI / CDropdownToggle
var CDropdownToggle = function CDropdownToggle(props) {
  var _togglerAttrs;

  var className = props.className,
      innerRef = props.innerRef,
      onClick = props.onClick,
      caret = props.caret,
      split = props.split,
      tag = props.tag,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "onClick", "caret", "split", "tag"]);

  var _useContext = (0, _react.useContext)(_CDropdown.Context),
      reference = _useContext.reference,
      setReference = _useContext.setReference,
      isOpen = _useContext.isOpen,
      setIsOpen = _useContext.setIsOpen,
      inNav = _useContext.inNav,
      setSplit = _useContext.setSplit;

  innerRef && innerRef(reference);
  (0, _react.useEffect)(function () {
    setSplit(split);
  });

  var click = function click(e) {
    if (props.disabled) {
      return;
    }

    onClick && onClick(e);
    setIsOpen(!isOpen);
  };

  var Tag = tag || (inNav ? _CLink["default"] : _CButton["default"]);
  var classes = (0, _classnames["default"])(className, {
    'dropdown-toggle': caret && !split,
    'nav-link': inNav
  });
  var togglerAttrs = (_togglerAttrs = {
    onClick: click,
    'aria-expanded': isOpen ? 'true' : 'false',
    'aria-haspopup': 'true',
    'aria-label': 'Dropdown toggle'
  }, _togglerAttrs["" + (tag && typeof tag === 'string' ? 'ref' : 'innerRef')] = setReference, _togglerAttrs);

  if (split) {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_CButton["default"], attributes, props.children), /*#__PURE__*/_react["default"].createElement(_CButton["default"], _extends({
      className: "dropdown-toggle dropdown-toggle-split"
    }, togglerAttrs, attributes), ''));
  } else {
    return /*#__PURE__*/_react["default"].createElement(Tag, _extends({
      className: classes
    }, togglerAttrs, attributes));
  }
};

CDropdownToggle.propTypes = process.env.NODE_ENV !== "production" ? {
  tag: _helper.tagPropType,
  children: _propTypes["default"].node,
  className: _propTypes["default"].string,
  //
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func, _propTypes["default"].string]),
  caret: _propTypes["default"].bool,
  onClick: _propTypes["default"].func,
  split: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool
} : {};
CDropdownToggle.defaultProps = {
  caret: true
};
var _default = CDropdownToggle;
exports["default"] = _default;
module.exports = exports.default;