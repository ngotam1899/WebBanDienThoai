"use strict";

exports.__esModule = true;
exports["default"] = exports.Context = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CFade = _interopRequireDefault(require("../fade/CFade"));

var _src = require("@coreui/utils/src");

var _helper = require("../utils/helper.js");

require("./CToast.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Context = _react["default"].createContext({}); //component - CoreUI / CToast


exports.Context = Context;

var CToast = function CToast(props) {
  var className = props.className,
      children = props.children,
      innerRef = props.innerRef,
      show = props.show,
      autohide = props.autohide,
      fade = props.fade,
      onStateChange = props.onStateChange,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "children", "innerRef", "show", "autohide", "fade", "onStateChange"]);

  var _useState = (0, _react.useState)(show),
      state = _useState[0],
      setState = _useState[1];

  var timeout = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    setState(show);
  }, [show]); //triggered on mount and destroy

  (0, _react.useEffect)(function () {
    return function () {
      return clearTimeout(timeout.current);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (state === true && autohide) {
      setAutohide();
    }

    onStateChange && onStateChange(state);
  }, [state]);

  var setAutohide = function setAutohide() {
    clearTimeout(timeout.current);
    timeout.current = setTimeout(function () {
      startAutohide();
    }, autohide);
  };

  var onMouseOver = function onMouseOver() {
    if (state !== 'closing') {
      state !== true && setState(true);
      clearTimeout(timeout.current);
    }
  };

  var onMouseOut = function onMouseOut() {
    if (autohide && state !== 'closing') {
      setAutohide();
    }
  };

  var startAutohide = function startAutohide() {
    if (!fade) {
      return setState(false);
    }

    setState('hiding');
    clearTimeout(timeout.current);
    timeout.current = setTimeout(function () {
      setState(false);
    }, 2000);
  };

  var close = function close() {
    if (!fade) {
      return setState(false);
    }

    setState('closing');
    clearTimeout(timeout.current);
    timeout.current = setTimeout(function () {
      setState(false);
    }, 500);
  }; // render


  var classes = (0, _classnames["default"])('toast', className);
  var fadeClasses = (0, _classnames["default"])(fade && (state === 'hiding' ? 'toast-fade-slow' : 'toast-fade'));
  var attrs = (0, _src.omitByKeys)(attributes, _helper.CFadeProps);
  return /*#__PURE__*/_react["default"].createElement(Context.Provider, {
    value: {
      close: close
    }
  }, state && /*#__PURE__*/_react["default"].createElement(_CFade["default"], _extends({
    className: classes,
    role: "alert",
    "aria-live": "assertive",
    "aria-atomic": "true",
    "in": state === true,
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut,
    baseClass: fadeClasses,
    innerRef: innerRef
  }, attrs), children));
};

CToast.propTypes = process.env.NODE_ENV !== "production" ? {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  //
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].string, _propTypes["default"].object]),
  show: _propTypes["default"].bool,
  autohide: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].bool]),
  fade: _propTypes["default"].bool,
  onStateChange: _propTypes["default"].func
} : {};
CToast.defaultProps = {
  fade: true
};
var _default = CToast;
exports["default"] = _default;