function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useState, createRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import CLink from '../link/CLink';
import { Context } from '../tabs/CTabs';

var getIndex = function getIndex(el) {
  return Array.from(el.parentNode.children).indexOf(el);
};

var getState = function getState(_ref) {
  var el = _ref.current;
  var hasSiblings = el.parentElement.childNodes.length > 1;
  return el.dataset.tab || getIndex(hasSiblings ? el : el.parentElement);
};

var CNavLink = function CNavLink(props) {
  var innerRef = props.innerRef,
      className = props.className,
      onClick = props.onClick,
      rest = _objectWithoutPropertiesLoose(props, ["innerRef", "className", "onClick"]);

  var tabState = useContext(Context);
  var actTab = (tabState || {}).active;
  var ref = createRef();
  innerRef && innerRef(ref);

  var _useState = useState(),
      active = _useState[0],
      setActive = _useState[1];

  useEffect(function () {
    typeof actTab !== 'undefined' && setActive(getState(ref) === actTab);
  }, [actTab]);

  var click = function click(e) {
    onClick && onClick(e);
    tabState && tabState.setActiveTab(getState(ref));
  };

  return /*#__PURE__*/React.createElement(CLink, _extends({
    active: active
  }, rest, {
    innerRef: ref,
    onClick: click,
    className: ['nav-link', className]
  }));
};

CNavLink.propTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  //
  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),
  onClick: PropTypes.func
} : {};
export default CNavLink;