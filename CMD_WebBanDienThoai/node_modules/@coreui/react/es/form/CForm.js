function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { tagPropType } from '../utils/helper.js'; //component - CoreUI / CForm

var CForm = function CForm(props) {
  var Tag = props.tag,
      className = props.className,
      innerRef = props.innerRef,
      inline = props.inline,
      wasValidated = props.wasValidated,
      attributes = _objectWithoutPropertiesLoose(props, ["tag", "className", "innerRef", "inline", "wasValidated"]); //render


  var classes = classNames(className, inline ? 'form-inline' : false, wasValidated ? 'was-validated' : false);
  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {
    className: classes,
    ref: innerRef
  }));
};

CForm.propTypes = process.env.NODE_ENV !== "production" ? {
  tag: tagPropType,
  children: PropTypes.node,
  className: PropTypes.string,
  //
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),
  inline: PropTypes.bool,
  wasValidated: PropTypes.bool
} : {};
CForm.defaultProps = {
  tag: 'form'
};
export default CForm;