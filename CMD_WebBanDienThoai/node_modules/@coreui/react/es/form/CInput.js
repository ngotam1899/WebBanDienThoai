function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames'; //component - CoreUI / CInput

var commonPropTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),
  valid: PropTypes.bool,
  invalid: PropTypes.bool
} : {};

var CInput = function CInput(props) {
  var className = props.className,
      innerRef = props.innerRef,
      type = props.type,
      valid = props.valid,
      invalid = props.invalid,
      plaintext = props.plaintext,
      size = props.size,
      sizeHtml = props.sizeHtml,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "type", "valid", "invalid", "plaintext", "size", "sizeHtml"]); // render


  var classes = classNames(plaintext ? 'form-control-plaintext' : 'form-control', size && "form-control-" + size, invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/React.createElement("input", _extends({
    className: classes,
    type: type
  }, attributes, {
    size: sizeHtml,
    ref: innerRef
  }));
};

CInput.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  plaintext: PropTypes.bool,
  type: PropTypes.string,
  size: PropTypes.string,
  sizeHtml: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
}) : {};
CInput.defaultProps = {
  type: 'text'
};

var CTextarea = function CTextarea(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      plaintext = props.plaintext,
      size = props.size,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "plaintext", "size"]); // render


  var classes = classNames(plaintext ? 'form-control-plaintext' : 'form-control', size && "form-control-" + size, invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/React.createElement("textarea", _extends({
    className: classes
  }, attributes, {
    ref: innerRef
  }));
};

CTextarea.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  plaintext: PropTypes.bool,
  size: PropTypes.string
}) : {};

var CInputFile = function CInputFile(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      custom = props.custom,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "custom"]); // render


  var classes = classNames(custom ? 'custom-file-input' : 'form-control-file', invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/React.createElement("input", _extends({
    className: classes
  }, attributes, {
    type: "file",
    ref: innerRef
  }));
};

CInputFile.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  custom: PropTypes.bool
}) : {};

var CInputCheckbox = function CInputCheckbox(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      custom = props.custom,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "custom"]); // render


  var classes = classNames(custom ? 'custom-control-input' : 'form-check-input', invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/React.createElement("input", _extends({
    className: classes,
    type: "checkbox"
  }, attributes, {
    ref: innerRef
  }));
};

CInputCheckbox.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  custom: PropTypes.bool
}) : {};

var CInputRadio = function CInputRadio(props) {
  return /*#__PURE__*/React.createElement(CInputCheckbox, _extends({}, props, {
    type: "radio"
  }));
};

var CSelect = function CSelect(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      invalid = props.invalid,
      size = props.size,
      sizeHtml = props.sizeHtml,
      custom = props.custom,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "invalid", "size", "sizeHtml", "custom"]); // render


  var baseClass = custom ? 'custom-select' : 'form-control';
  var classes = classNames(baseClass, size && baseClass + "-" + size, invalid && 'is-invalid', valid && 'is-valid', className);
  return /*#__PURE__*/React.createElement("select", _extends({
    className: classes
  }, attributes, {
    size: sizeHtml,
    ref: innerRef
  }));
};

CSelect.propTypes = process.env.NODE_ENV !== "production" ? _extends(_extends({}, commonPropTypes), {}, {
  size: PropTypes.string,
  sizeHtml: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
}) : {};
export { CInput, CTextarea, CInputFile, CInputCheckbox, CInputRadio, CSelect };