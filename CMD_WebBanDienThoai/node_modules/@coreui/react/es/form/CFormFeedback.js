function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames'; //component - CoreUI / CFormFeedback

var CFormFeedback = function CFormFeedback(props) {
  var className = props.className,
      innerRef = props.innerRef,
      valid = props.valid,
      tooltip = props.tooltip,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "valid", "tooltip"]); //render


  var validMode = tooltip ? 'tooltip' : 'feedback';
  var classes = classNames(valid ? "valid-" + validMode : "invalid-" + validMode, className);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: classes
  }, attributes, {
    ref: innerRef
  }));
};

CFormFeedback.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.node,
  className: PropTypes.string,
  //
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),
  valid: PropTypes.bool,
  tooltip: PropTypes.bool
} : {};
export var CValidFeedback = function CValidFeedback(props) {
  return /*#__PURE__*/React.createElement(CFormFeedback, _extends({}, props, {
    valid: true
  }));
};
export var CInvalidFeedback = function CInvalidFeedback(props) {
  return /*#__PURE__*/React.createElement(CFormFeedback, _extends({}, props, {
    valid: false
  }));
};