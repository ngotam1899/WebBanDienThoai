function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { tagPropType } from '../utils/helper.js';
import CLink from '../link/CLink'; //component - CoreUI / CBadge

var CBadge = function CBadge(props) {
  var _classNames, _ref;

  var tag = props.tag,
      className = props.className,
      innerRef = props.innerRef,
      color = props.color,
      shape = props.shape,
      attributes = _objectWithoutPropertiesLoose(props, ["tag", "className", "innerRef", "color", "shape"]); // render


  var classes = classNames(className, 'badge', (_classNames = {}, _classNames["badge-" + color] = color, _classNames["badge-" + shape] = shape, _classNames));
  var Tag = attributes.to || attributes.href ? CLink : tag;
  var ref = (_ref = {}, _ref["" + (typeof Tag === 'string' ? 'ref' : 'innerRef')] = innerRef, _ref);
  return /*#__PURE__*/React.createElement(Tag, _extends({
    className: classes
  }, attributes, ref));
};

CBadge.propTypes = process.env.NODE_ENV !== "production" ? {
  tag: tagPropType,
  className: PropTypes.string,
  //
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),
  color: PropTypes.string,
  shape: PropTypes.oneOf(['', 'pill'])
} : {};
CBadge.defaultProps = {
  tag: 'span'
};
export default CBadge;