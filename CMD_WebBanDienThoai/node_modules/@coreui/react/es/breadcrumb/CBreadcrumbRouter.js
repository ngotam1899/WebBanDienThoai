function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { CBreadcrumb, CBreadcrumbItem } from '../index';
import { Link, useLocation, matchPath } from 'react-router-dom'; //component - CoreUI / CBreadcrumbRouter

var getPaths = function getPaths(pathname) {
  var paths = ['/'];
  if (pathname === '/') return paths;
  pathname.split('/').reduce(function (prev, curr) {
    var currPath = prev + "/" + curr;
    paths.push(currPath);
    return currPath;
  });
  return paths;
};

var CBreadcrumbRouteItem = function CBreadcrumbRouteItem(_ref, currPath) {
  var name = _ref.name,
      path = _ref.path;

  if (path === currPath) {
    return /*#__PURE__*/React.createElement(CBreadcrumbItem, {
      key: path,
      active: true
    }, name);
  } else {
    return /*#__PURE__*/React.createElement(CBreadcrumbItem, {
      key: path
    }, /*#__PURE__*/React.createElement(Link, {
      to: path
    }, name));
  }
};

var CBreadcrumbRouter = function CBreadcrumbRouter(props) {
  var className = props.className,
      innerRef = props.innerRef,
      routes = props.routes,
      attributes = _objectWithoutPropertiesLoose(props, ["className", "innerRef", "routes"]);

  var items = null;

  if (routes) {
    var currPath = useLocation().pathname;
    var paths = getPaths(currPath);
    var currRoutes = paths.map(function (path) {
      return routes.find(function (route) {
        return matchPath(path, {
          path: route.path,
          exact: route.exact
        });
      });
    }).filter(function (route) {
      return route;
    });
    items = currRoutes.map(function (route) {
      return CBreadcrumbRouteItem(route, currPath);
    });
  } //render


  var classes = classNames(className);
  return /*#__PURE__*/React.createElement(CBreadcrumb, _extends({
    className: classes
  }, attributes, {
    ref: innerRef
  }), items);
};

CBreadcrumbRouter.propTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),
  routes: PropTypes.array
} : {};
export default CBreadcrumbRouter;