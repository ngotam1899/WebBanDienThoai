function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback } from 'react';
import PropTypes from 'prop-types';
import CTooltip from './CTooltip.js';
import { renderToString } from 'react-dom/server'; //component - CoreUI / CPopover

var template = "<h3 class=\"popover-header\">H</h3><div class=\"popover-body\">C</div>";

var generateContent = function generateContent(content, header) {
  return template.replace('H', renderToString(header)).replace('C', renderToString(content));
};

var CPopover = function CPopover(props) {
  var header = props.header,
      children = props.children,
      content = props.content,
      config = _objectWithoutPropertiesLoose(props, ["header", "children", "content"]);

  var computedContent = useCallback(generateContent(content, header), [content, header]);

  var advancedOptions = _extends(_extends({}, config ? config.advancedOptions || {} : {}), {}, {
    theme: 'cpopover'
  });

  var computedConfig = _extends(_extends({}, config), {}, {
    advancedOptions: advancedOptions
  });

  return /*#__PURE__*/React.createElement(CTooltip, _extends({
    content: computedContent
  }, computedConfig), children);
};

CPopover.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.node,
  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  header: PropTypes.oneOfType([PropTypes.string, PropTypes.node])
} : {};
export default CPopover;