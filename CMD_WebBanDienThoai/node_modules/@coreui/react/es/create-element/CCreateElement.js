function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo } from 'react';
import PropTypes from 'prop-types'; //component - CoreUI / CCreateElement

var CCreateElement = function CCreateElement(_ref) {
  var items = _ref.items,
      _ref$components = _ref.components,
      components = _ref$components === void 0 ? {} : _ref$components;

  var renderItem = function renderItem(item, i) {
    var _tag = item._tag,
        _children = item._children,
        rest = _objectWithoutPropertiesLoose(item, ["_tag", "_children"]);

    var Tag = components[_tag] || _tag;
    var children = _children ? _children.map(function (child, i) {
      return typeof child === 'object' ? renderItem(child, i) : child;
    }) : '';
    return /*#__PURE__*/React.createElement(Tag, _extends({
      key: Tag + i
    }, rest), children);
  };

  var generatedItems = useMemo(function () {
    return items && items.map(function (item, i) {
      return renderItem(item, i);
    });
  }, [JSON.stringify(items)]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, generatedItems);
};

CCreateElement.propTypes = process.env.NODE_ENV !== "production" ? {
  items: PropTypes.array.isRequired,
  components: PropTypes.object
} : {};
export default CCreateElement;