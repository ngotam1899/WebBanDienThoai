function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { Transition } from 'react-transition-group';
export var Context = React.createContext({});

var getTransitionClass = function getTransitionClass(s) {
  return s === 'entering' ? 'd-block' : s === 'entered' ? 'show d-block' : s === 'exiting' ? 'd-block' : '';
}; //component - CoreUI / CModal


var CModal = function CModal(props) {
  var _classNames, _classNames2, _classNames3;

  var innerRef = props.innerRef,
      show = props.show,
      centered = props.centered,
      size = props.size,
      color = props.color,
      borderColor = props.borderColor,
      fade = props.fade,
      backdrop = props.backdrop,
      closeOnBackdrop = props.closeOnBackdrop,
      onOpened = props.onOpened,
      onClosed = props.onClosed,
      addContentClass = props.addContentClass,
      onClose = props.onClose,
      attributes = _objectWithoutPropertiesLoose(props, ["innerRef", "show", "centered", "size", "color", "borderColor", "fade", "backdrop", "closeOnBackdrop", "onOpened", "onClosed", "addContentClass", "onClose"]);

  var _useState = useState(show),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  var modalClick = function modalClick(e) {
    return e.target.dataset.modal && closeOnBackdrop && close();
  };

  useEffect(function () {
    setIsOpen(show);
  }, [show]);

  var close = function close() {
    onClose && onClose();
    setIsOpen(false);
  };

  var onEntered = function onEntered() {
    return onOpened && onOpened();
  };

  var onExited = function onExited() {
    return onClosed && onClosed();
  };

  var modalClasses = classNames('modal overflow-auto fade', (_classNames = {}, _classNames["modal-" + color] = color, _classNames));
  var dialogClasses = classNames('modal-dialog', (_classNames2 = {
    'modal-dialog-centered': centered
  }, _classNames2["modal-" + size] = size, _classNames2));
  var contentClasses = classNames('modal-content', (_classNames3 = {}, _classNames3["border-" + borderColor] = borderColor, _classNames3), addContentClass);
  var backdropClasses = classNames({
    'modal-backdrop': true,
    'fade': fade,
    'show': isOpen || fade
  });
  return /*#__PURE__*/React.createElement("div", {
    onClick: modalClick
  }, /*#__PURE__*/React.createElement(Transition, {
    "in": Boolean(isOpen),
    onEntered: onEntered,
    onExited: onExited,
    timeout: fade ? 150 : 0
  }, function (status) {
    var transitionClass = getTransitionClass(status);
    var classes = classNames(modalClasses, transitionClass);
    return /*#__PURE__*/React.createElement("div", {
      tabIndex: "-1",
      role: "dialog",
      className: classes,
      "data-modal": true
    }, /*#__PURE__*/React.createElement("div", {
      className: dialogClasses,
      role: "document"
    }, /*#__PURE__*/React.createElement("div", _extends({}, attributes, {
      className: contentClasses,
      ref: innerRef
    }), /*#__PURE__*/React.createElement(Context.Provider, {
      value: {
        close: close
      }
    }, props.children))));
  }), backdrop && isOpen && /*#__PURE__*/React.createElement("div", {
    className: backdropClasses
  }));
};

CModal.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.node,
  className: PropTypes.string,
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),
  show: PropTypes.bool,
  centered: PropTypes.bool,
  size: PropTypes.oneOf(['', 'sm', 'lg', 'xl']),
  backdrop: PropTypes.bool,
  color: PropTypes.string,
  borderColor: PropTypes.string,
  onOpened: PropTypes.func,
  onClosed: PropTypes.func,
  fade: PropTypes.bool,
  closeOnBackdrop: PropTypes.bool,
  onClose: PropTypes.func,
  addContentClass: PropTypes.string
} : {};
CModal.defaultProps = {
  backdrop: true,
  fade: true,
  closeOnBackdrop: true
};
export default CModal;