{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\ngota\\\\Downloads\\\\coreui-free-react-admin-template-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ngota\\\\Downloads\\\\coreui-free-react-admin-template-master\\\\src\\\\views\\\\charts\\\\ChartLineSimple.js\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getColor, deepObjectsMerge } from '@coreui/utils/src';\nimport { CChartLine } from '@coreui/react-chartjs';\n\nvar ChartLineSimple = function ChartLineSimple(props) {\n  var borderColor = props.borderColor,\n      backgroundColor = props.backgroundColor,\n      pointHoverBackgroundColor = props.pointHoverBackgroundColor,\n      dataPoints = props.dataPoints,\n      label = props.label,\n      pointed = props.pointed,\n      attributes = _objectWithoutProperties(props, [\"borderColor\", \"backgroundColor\", \"pointHoverBackgroundColor\", \"dataPoints\", \"label\", \"pointed\"]);\n\n  var pointHoverColor = function () {\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor;\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor;\n    }\n\n    return borderColor;\n  }();\n\n  var defaultDatasets = function () {\n    return [{\n      data: dataPoints,\n      borderColor: getColor(borderColor),\n      backgroundColor: getColor(backgroundColor),\n      pointBackgroundColor: getColor(pointHoverColor),\n      pointHoverBackgroundColor: getColor(pointHoverColor),\n      label: label\n    }];\n  }();\n\n  var pointedOptions = function () {\n    return {\n      scales: {\n        xAxes: [{\n          offset: true,\n          gridLines: {\n            color: 'transparent',\n            zeroLineColor: 'transparent'\n          },\n          ticks: {\n            fontSize: 2,\n            fontColor: 'transparent'\n          }\n        }],\n        yAxes: [{\n          display: false,\n          ticks: {\n            display: false,\n            min: Math.min.apply(Math, dataPoints) - 5,\n            max: Math.max.apply(Math, dataPoints) + 5\n          }\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    };\n  }();\n\n  var straightOptions = function () {\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    };\n  }();\n\n  var defaultOptions = function () {\n    var options = pointed ? pointedOptions : straightOptions;\n    return Object.assign({}, options, {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      }\n    });\n  }();\n\n  var computedDatasets = function () {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {});\n  }();\n\n  var computedOptions = function () {\n    return deepObjectsMerge(defaultOptions, attributes.options || {});\n  }(); // render\n\n\n  return /*#__PURE__*/React.createElement(CChartLine, Object.assign({}, attributes, {\n    type: \"line\",\n    datasets: computedDatasets,\n    options: computedOptions,\n    labels: label,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }));\n};\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\nexport default ChartLineSimple;","map":{"version":3,"sources":["C:/Users/ngota/Downloads/coreui-free-react-admin-template-master/src/views/charts/ChartLineSimple.js"],"names":["React","PropTypes","getColor","deepObjectsMerge","CChartLine","ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","datasets","computedOptions","propTypes","tag","oneOfType","func","string","className","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils/src'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      type=\"line\"\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n"]},"metadata":{},"sourceType":"module"}